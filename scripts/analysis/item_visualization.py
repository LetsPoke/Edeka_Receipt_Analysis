import os

import pandas as pd
import matplotlib

matplotlib.use("Agg")  # Use a non-interactive backend
import matplotlib.pyplot as plt
# plt.style.use("seaborn-v0_8")
import matplotlib.dates as mdates


def plot_item_price_over_time(df, item_name):
    """
    Plots the unit_price of a given item_name over time,
    using the 'date' column as x-axis.
    """

    # 1) Filter for item_name, e.g. 'Gurken'
    df_item = df[df["item_name"].str.lower() == item_name.lower()]

    # 2) Convert 'date' to an actual datetime object.
    #    If your date format is dd.mm.yy, we use "%d.%m.%y".
    #    If it's dd.mm.yyyy, use "%d.%m.%Y".
    #    Adjust errors='coerce' if needed.
    df_item["parsed_date"] = pd.to_datetime(df_item["date"], format="%d.%m.%y", errors="coerce")

    # 3) Sort by date so the plot lines don't jump around
    df_item = df_item.sort_values(by="parsed_date")

    # 4) Plot unit_price over time
    plt.figure(figsize=(16, 9))

    # single points
    # plt.scatter(df_item["parsed_date"], df_item["unit_price"])

    # line plot
    # plt.plot(df_item["parsed_date"], df_item["unit_price"], marker='o', linestyle='-')

    # rolling average
    df_item["rolling_avg"] = df_item["unit_price"].rolling(window=1).mean()
    plt.plot(df_item["parsed_date"], df_item["rolling_avg"])

    # monthly average
    # df_item["month"] = df_item["parsed_date"].dt.to_period("M")
    # monthly = df_item.groupby("month")["unit_price"].mean().reset_index()
    # monthly["month_start"] = monthly["month"].dt.to_timestamp()
    # plt.plot(monthly["month_start"], monthly["unit_price"], marker='o')

    plt.title(f"{item_name} Price Over Time")
    plt.xlabel("Date")
    plt.ylabel("Unit Price (EUR)")

    # readability settings
    ax = plt.gca()  # get current axis
    # a tick every month:
    ax.xaxis.set_major_locator(mdates.MonthLocator(interval=1))
    # Format as YYYY-MM
    ax.xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m"))
    # rotate the labels
    plt.xticks(rotation=45)

    # 5) Save the plot to a file in folder output/autogenerated/visualizations
    # if directory does not exist, create it
    output_folder = os.path.join("output", "autogenerated", "visualizations")
    os.makedirs(output_folder, exist_ok=True)

    # save the plot
    plt.tight_layout()
    plt.savefig(f"output/autogenerated/visualizations/{item_name}_price_over_time.png")
    plt.close()


def plot_multi_items_price_over_time(df, items_list, output_name="combined_plot.png"):
    """
    Plots unit_price (or rolling averages) for multiple items on the same figure.
    Each item gets its own line.
    """
    plt.figure(figsize=(16, 9))

    for item_name in items_list:
        # Filter rows for this item
        df_item = df[df["item_name"].str.lower() == item_name.lower()].copy()

        if df_item.empty:
            # If no rows found for item_name, skip
            print(f"No data found for item: {item_name}")
            continue

        # Convert date
        df_item["parsed_date"] = pd.to_datetime(
            df_item["date"],
            format="%d.%m.%y",
            errors="coerce"
        ).sort_values()

        # Sort by date
        df_item = df_item.sort_values(by="parsed_date")

        # Rolling average (optional)
        df_item["rolling_avg"] = df_item["unit_price"].rolling(window=7).mean()

        # Plot
        plt.plot(df_item["parsed_date"], df_item["rolling_avg"], marker='o', linestyle='-', label=item_name)

    # Format x-axis
    ax = plt.gca()
    ax.xaxis.set_major_locator(mdates.MonthLocator(interval=1))
    ax.xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m"))
    plt.xticks(rotation=45)

    plt.title("Price Over Time for Multiple Items (7 day avg)")
    plt.xlabel("Date")
    plt.ylabel("Unit Price (EUR)")
    plt.legend()  # Show legend with item names

    # beautify
    plt.grid(True, which='major', axis='both', alpha=0.5)
    plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))

    # Save figure
    output_folder = os.path.join("output", "autogenerated", "visualizations")
    os.makedirs(output_folder, exist_ok=True)
    save_path = os.path.join(output_folder, output_name)
    plt.tight_layout()
    plt.savefig(save_path)
    plt.close()
    print(f"Combined plot saved to {save_path}")
